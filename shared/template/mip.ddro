
//initialize fields
foo_in;
//apply operators on arguments
foo_op;

/* Look-from and look-at are points, but up is a vector;
   all are stored in vec3s.  Diderot has not adopted the
   mathematical vector-vs-point distinction into its type system */
input vec3 camEye ("camera look-from point") = [6, 9, 2];
input vec3 camAt ("camera look-at point") = [0, 0, 0];
input vec3 camUp ("camera pseudo-up vector") = [0, 0, 1];
input real camNear ("relative to look-at point, distance to near clipping plane (where rays start from)") = -3;
input real camFar ("relative to look-at point, distance to far clipping plane") = 3;
input real camFOV ("field-of-view angle (in degrees) subtended vertically by view plane") = 15;
input bool camOrtho ("whether to use orthographic, instead of perspective, projection") = false;
input int iresU ("# samples on horizontal axis of image") = 640;
input int iresV ("# samples on vertical axis of image") = 480;
/* With perspective projection, rayStep is distance between sampling planes
   through the volume, not actually the step along the ray. For a ray
   parallel to camAt-camEye, these are the same; for other rays the
   step along the ray is (slightly) larger than rayStep. */
input real rayStep ("inter-sample distance along view direction") = 0.1;
// Currently, Unicode is not allowed in Diderot strings,
// hence using "-inf" instead of "-∞" in this usage info.
input real out0 ("value at which to initilize output max accumulator; using -inf ensures that output will stay -inf if ray misses volume entirely") = -∞;

// this is important for this example, but not other volume renderers
input bool inSphere ("only render samples inside a unit sphere") = false;



// (boilerplate) computing ray parameters and view-space basis
vec3 camN = normalize(camAt - camEye);  // N: away from eye
vec3 camU = normalize(camN × camUp);    // U: right
vec3 camV = camN × camU;                // V: down (right-handed frame)
real camDist = |camAt - camEye|;
real camVmax = tan(camFOV*π/360)*camDist;
real camUmax = camVmax*iresU/iresV;
real camNearVsp = camNear + camDist; // near clip, view space
real camFarVsp = camFar + camDist;   // far clip, view space

// how to compute MIP of ray through (rayU,rayV) on view plane
strand raycast(real rayU, real rayV) {
   // ray start, accounting for initial rayStep increment
   real rayN = camNearVsp - rayStep;
   // offset from view-plane center to where ray hits it
   vec3 UV = rayU*camU + rayV*camV;
   // where ray starts (ray position at N=0)
   vec3 rayOrig = camEye + (UV if camOrtho else [0,0,0]);
   // the vector to parameterize position along ray for this pixel
   vec3 rayVec = camN + ([0,0,0] if camOrtho else UV/camDist);
   // initialize output value
   //output tensor 
   output foo_outTen
   update { // how to compute one sample of a MIP
      rayN += rayStep;          // increment ray position
      if (rayN > camFarVsp) {   // ray hit the far clipping plane
         stabilize;
      }
      vec3 pos = rayOrig + rayN*rayVec;  // pos = ray sample position
    // If not inside field domain,
     foo_basein
          || (inSphere && |pos| > 1)) {  // or not inside required sphere,
         continue;                       // then move onto next iteration
      }
     // update output based on last sample
    foo_fieldOut

   }
}

/* this creates a cell-centered sampling of the view plane */
initially [ raycast(lerp(-camUmax, camUmax, -0.5, ui, iresU-0.5),
                    lerp(-camVmax, camVmax, -0.5, vi, iresV-0.5))
            | vi in 0..iresV-1, ui in 0..iresU-1 ];
