input int sz0 ("# samples on faster axis") = 101;
input int sz1 ("# samples on slower axis") = 100;
input real width ("approx width of world-space region sampled") = 1;
input vec2 off ("translation offset from origin-centered grid") = [0,0];
input real shear ("amount of shear in sampling grid") = 0;
input real angle ("orientation (in degrees) of faster axis") = 0;

real theta = angle*π/180;
// rotation by theta of [1,0] towards [0,1]
tensor[2,2] rot = [[cos(theta),-sin(theta)],[sin(theta),cos(theta)]];
// sample spacing on faster and (unsheared) slower axis
vec2 spc = [width/(sz0-1), width/(sz1-1)];
// inter-sample vector on faster axis
vec2 edge0 = rot•[spc[0], 0];
// inter-sample vector on slower axis
vec2 edge1 = rot•[0, spc[1]] + shear*edge0;
// location of first sample
vec2 orig = -(edge0*(sz0-1) + edge1*(sz1-1))/2 + off;

///-- field defined by coefficients --
input tensor[4] setA1 =[0,0,0,0];
input tensor[4] setB1 =[0,0,0,0];
input tensor[4] setC1 =[0,0,0,0];
input tensor[4] setD1 =[0,0,0,0];
input tensor[4] setA2 =[0,0,0,0];
input tensor[4] setB2 =[0,0,0,0];
input tensor[4] setC2 =[0,0,0,0];
input tensor[4] setD2 =[0,0,0,0];
input tensor[4] setA3 =[0,0,0,0];
input tensor[4] setB3 =[0,0,0,0];
input tensor[4] setC3 =[0,0,0,0];
input tensor[4] setD3 =[0,0,0,0];

function real axis(vec2 pos, tensor[4] setA, tensor[4] setB, tensor[4] setC, tensor[4] setD) {
    real x = pos[0];
    real y = pos[1];
    real a = setA[0];
    real b = setA[1];
    real c = setA[2];
    real d = setA[3];
    real e = setB[0];
    real f = setB[1];
    real g = setB[2];
    real h = setB[3];
    real i = setC[0];
    real j = setC[1];
    real k = setC[2];
    real l = setC[3];
    real m = setD[0];
    real n = setD[1];
    real o = setD[2];
    real p = setD[3];

    // as intended to be represented
    real tA = a + b*y + c*x*y+ d*x;
    real tB = ((e+f*x+g*(x*x))*y*y) + (h*(x*x)*y);
    real tC = i*(x*x) + (j+k*x+l*(x*x))*y*y*y;
    real tD = (x*x*x)*((m*y*y*y)+(n*y*y)+(o*y)+p);
    return  tA+tB+tC+tD;
}


function vec3 func(vec2 pos) {
    real val1 = axis(pos, setA1, setB1, setC1, setD1);
    real val2 = axis(pos, setA2, setB2, setC2, setD2);
    real val3 = axis(pos, setA3, setB3, setC3, setD3);
    return [val1, val2, val3];
}

strand sample(int idx0, int idx1) {
    output vec3 out = [0.0,0.0,0.0];
    update {
        /* Diderot doesn't (currently) allow print statements from
        global initialization, so to print something once per
        program, you need to test for a condition that will be true
        for one strand.  By the immediate stabilize, this will only
        run for one iteration. */
        if (0 == idx0 && 0 == idx1) {
            print("NRRD0004\n");
            print("# Complete NRRD file format specification at:\n");
            print("# http://teem.sourceforge.net/nrrd/format.html\n");
            // NOTE: this assumes we haven't been compiled with --double
            print("type: float\n");
            print("dimension: 3\n");
            print("sizes: 3 ", sz0, " ", sz1, "\n");
            print("kinds: 3-vector space space\n");

           // print("centers: none cell cell\n");

            print("endian: little\n");         // NOTE: this assumes machine endianness
            print("encoding: raw\n");
            print("space dimension: 2\n");
            print("space directions: none (", edge0[0], ",", edge0[1],
            ") (", edge1[0], ",", edge1[1], ")\n");
            print("space origin: (", orig[0], ",", orig[1], ")\n");
            // NOTE: this assumes output filename is not explicitly set
            print("data file: out.nrrd\n");
            print("byte skip: -1\n");
        }
        out = func(orig + idx0*edge0 + idx1*edge1);
        stabilize;
    }
}

/*
** Create one strand per sample point. The "initially [ ]" creates a grid
** of strands (as opposed to a collection).
*/
initially [ sample(idx0, idx1)
| idx1 in 0..(sz1-1),   // SLOWER axis
idx0 in 0..(sz0-1) ]; // FASTER axis
